/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.39
 * Generated at: 2013-06-16 04:19:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.site.domain;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import net.tanesha.recaptcha.ReCaptchaFactory;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.StringEscapeUtils;
import net.tanesha.recaptcha.ReCaptchaResponse;
import net.tanesha.recaptcha.ReCaptcha;
import jfix.util.I18N;
import jfix.util.Regexps;
import jease.cms.domain.User;
import jease.cms.domain.Discussion;
import jease.site.Templates;
import jease.site.Discussions;
import jease.Registry;
import jease.Names;

public final class Discussion_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

 
	final String JEASE_DISCUSSION_RECURSION = "Jease.Discussion.Recursion";

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


	Discussion discussion = (Discussion) request.getAttribute("Node");
	String id = String.valueOf(discussion.getPath().hashCode());
	if (session.getAttribute(discussion.getPath()) != null) {
		discussion = (Discussion) session.getAttribute(discussion.getPath());
	}

		// If the user is logged into the CMS, use his name for discussion.
	if (session.getAttribute(Names.JEASE_DISCUSSION_AUTHOR) == null 
			&& session.getAttribute(User.class.toString()) != null) {
		session.setAttribute(Names.JEASE_DISCUSSION_AUTHOR, 
				((User) session.getAttribute(User.class.toString())).getName());
	}
	
	// Is the template called recursively?
	boolean toplevel = request.getAttribute(JEASE_DISCUSSION_RECURSION) == null ;
	boolean enabled = request.getAttribute(Names.JEASE_DISCUSSION_DISABLED) == null;
	String subject = request.getParameter("subject" + id);
	String author = request.getParameter("author" + id);
	String comment = request.getParameter("comment" + id);
	String submit = request.getParameter("submit" + id);
	String message = null;

	ReCaptcha recaptcha = null;
	if (StringUtils.isNotBlank(Registry.getParameter(Names.JEASE_RECAPTCHA_PUBLIC)) && StringUtils.isNotBlank(Registry.getParameter(Names.JEASE_RECAPTCHA_PRIVATE))) {
		recaptcha = ReCaptchaFactory.newReCaptcha(Registry.getParameter(Names.JEASE_RECAPTCHA_PUBLIC), Registry.getParameter(Names.JEASE_RECAPTCHA_PRIVATE), true);
	}

	if (enabled && toplevel && submit != null) {
		ReCaptchaResponse recaptchaResponse = null;
		if (recaptcha != null && session.getAttribute(Names.JEASE_DISCUSSION_AUTHOR) == null) {
			recaptchaResponse = recaptcha.checkAnswer(request.getRemoteAddr(), request.getParameter("recaptcha_challenge_field"), request.getParameter("recaptcha_response_field"));
		}
		if (session.getAttribute(Names.JEASE_DISCUSSION_AUTHOR) != null || recaptcha == null || (recaptchaResponse != null && recaptchaResponse.isValid())) {
			message = Discussions.addComment((Discussion) request.getAttribute("Node"), author, subject, comment, true);
			session.setAttribute(Names.JEASE_DISCUSSION_AUTHOR, author);
			if (message == null) {
				subject = author = comment = null;
			}
		} else {
			message = I18N.get("Code_is_not_correct");
			session.removeAttribute(Names.JEASE_DISCUSSION_AUTHOR);
		}
	}

      out.write("<div class=\"Discussion\">\n");
      out.write("\n");
      out.write("<div class=\"Comment\">\n");
      out.write("\t<span class=\"Title\">\n");
      out.write("\t\t");
 if (toplevel) { 
      out.write("<strong>");
      out.print(discussion.getTitle());
      out.write("</strong>\n");
      out.write("\t\t");
 } else { 
 if (Registry.getParameter(Names.JEASE_DISCUSSION_PRESENTATION, "").toLowerCase().startsWith("thread")) { 
      out.write("<a href=\"");
      out.print(request.getContextPath() );
      out.print(((Discussion) request.getAttribute("Node")).getPath());
      out.write('"');
      out.write('>');
      out.print(discussion.getTitle());
      out.write("</a>\n");
      out.write("\t\t\t");
 } else { 
      out.write("<strong>");
      out.print(discussion.getTitle());
      out.write("</strong>\n");
      out.write("\t\t\t");
 } 
 } 
      out.write("</span>\n");
      out.write("\t");
 if (StringUtils.isNotEmpty(discussion.getAuthor())) {
      out.write("<span class=\"Author\">");
      out.print( I18N.get("By") );
      out.print( " ");
      out.print( discussion.getAuthor() );
      out.write("</span>\n");
      out.write("\t\t<span class=\"Date\">(");
      out.print(String.format("%1$td %1$tb %1$tY", discussion.getLastModified()));
      out.write(")</span>\n");
      out.write("\t");
 } 
      out.write("<div class=\"Text\">");
      out.print(Regexps.convertTextToHtml(discussion.getComment()));
      out.write("</div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<ul class=\"Thread\">\n");
      out.write("\t");
 for (Discussion child : ((Discussion) request.getAttribute("Node")).getChildren(Discussion.class)) { 
 if (child.isVisible()) { 
      out.write("<li>\n");
      out.write("\t\t");

			request.setAttribute(JEASE_DISCUSSION_RECURSION, true);
			request.setAttribute("Node", child);
			pageContext.include(Templates.get(child));
			request.setAttribute("Node", discussion);
			request.removeAttribute(JEASE_DISCUSSION_RECURSION);
		
      out.write("</li>\n");
      out.write("\t\t");
 } 
 } 
      out.write("</ul>\n");
      out.write("\n");
 if (enabled && toplevel) { 
      out.write("<a name=\"discussion");
      out.print( id );
      out.write("\"></a>\n");
      out.write("\t<form class=\"Submission\" action=\"#discussion");
      out.print( id );
      out.write("\" method=\"post\">\n");
      out.write("\t\t<dl>\n");
      out.write("\t\t<dt>");
      out.print( I18N.get("Name") );
      out.write(":</dt>\n");
      out.write("\t\t<dd><input type=\"text\" name=\"author");
      out.print(id );
      out.write("\" maxlength=\"60\" value=\"");
      out.print(author != null ? StringEscapeUtils.escapeXml(author) : (session.getAttribute(Names.JEASE_DISCUSSION_AUTHOR) != null ? StringEscapeUtils.escapeXml((String) session.getAttribute(Names.JEASE_DISCUSSION_AUTHOR)) : I18N.get("Anonymous")) );
      out.write('"');
      out.print( author == null ? " onFocus=\"this.value=''\"" :"" );
      out.write("/></dd>\n");
      out.write("\t\t<dt>");
      out.print( I18N.get("Subject") );
      out.write(":</dt>\n");
      out.write("\t\t<dd><input type=\"text\" name=\"subject");
      out.print(id );
      out.write("\" maxlength=\"60\" value=\"");
      out.print(subject != null ? StringEscapeUtils.escapeXml(subject) : "" );
      out.write("\"/></dd>\n");
      out.write("\t\t<dt>");
      out.print( I18N.get("Comment") );
      out.write(":</dt>\n");
      out.write("\t\t<dd><textarea name=\"comment");
      out.print(id );
      out.write("\" rows=\"10\">");
      out.print(comment != null ? StringEscapeUtils.escapeXml(comment) : "" );
      out.write("</textarea></dd>\n");
      out.write("\t\t");
 if (recaptcha != null && session.getAttribute(Names.JEASE_DISCUSSION_AUTHOR) == null) { 
      out.write("<dt>");
      out.print( I18N.get("Please_enter_the_code") );
      out.write(":</dt>\n");
      out.write("\t\t\t<dd>");
      out.print( recaptcha.createRecaptchaHtml(request.getParameter("error"), "clean", 0) );
      out.write("</dd>\n");
      out.write("\t\t");
 } 
      out.write("</dl>\n");
      out.write("\t\t<p>\n");
      out.write("\t\t");
 if (StringUtils.isNotEmpty(message)) { 
      out.write('<');
      out.write('b');
      out.write('>');
      out.print(message );
      out.write("!</b>\n");
      out.write("\t\t");
 } else if (submit != null) { 
      out.write('<');
      out.write('i');
      out.write('>');
      out.print(I18N.get("Thank_you_for_your_comment") );
      out.write(".</i>\n");
      out.write("\t\t");
 } 
      out.write("<input type=\"submit\" name=\"submit");
      out.print(id );
      out.write("\" value=\"");
      out.print(I18N.get("Submit") );
      out.write("\" />\n");
      out.write("\t\t</p>\n");
      out.write("\t</form>\n");
 } 
      out.write("</div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
